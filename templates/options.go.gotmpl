// Code generated by options, DO NOT EDIT.

package {{ .PackageName }}

import (	
	"github.com/fsnotify/fsnotify"
	"github.com/spf13/viper"
	{{ range $childValue := .ExtraImports}}
	{{ $childValue | doubleQuotes }}
	{{ end }}
)

var (	
	applicationOptions ApplicationOptions = ApplicationOptions{}
)

{{- define "genStructOptFn" -}}	
	{{ if isMap . }}
	{{/* get children */}}		
	{{- range $childKey, $childValue := . }}	

	{{- if isMap $childValue | not -}}
		// {{ index $childValue 2 }}
	{{ end }}

	{{- camelcase $childKey -}}	
	{{- if isMap $childValue -}} 
		{{ " " }}struct {
			{{- template "genStructOptFn" $childValue -}}
		}
	{{- else -}}		
		{{ " " }} {{- typeOf (index $childValue 0) (index $childValue 3)}}	`yaml:"{{ index $childValue 1}}"`
	{{- end }}
	{{ end -}}			
	{{ else }}
	// default {{ . }}	
	{{ end }}	
{{- end -}}

{{ define "genStructRoot" }}
	{{- template "genStructOptFn" . -}}	
{{ end }}

type ApplicationOptions struct {
{{- template "genStructRoot" .StructMap }}
}

func OptionsInit(configFilenamePtr *string) {
  	{{ range .Options }}
	// {{.Yaml}}
	{{$vars := mustRegexSplit "\\." .Yaml -1 -}}
	
	{{ $accessName := print "applicationOptions." (varAccessName $vars) -}}	
	{{ defaultValueWrapper $accessName .DefaultValue .Format }}
	viper.SetDefault("{{ .Yaml }}", 
		applicationOptions.{{ $varsLen := len $vars -}}
		{{ range $i,$e := $vars -}}
			{{ if eq add $varsLen -1 $i | not -}}
			.
			{{- end -}}
			{{ $e | camelcase -}}
		{{ end }},
	)
	{{ end -}}

	viper.AddConfigPath(".")
	if configFilenamePtr == nil {
		viper.SetConfigName("options")		
	}else {
		viper.SetConfigName(*configFilenamePtr)
	}

	viper.SetConfigType("yaml")
	viper.WatchConfig()
	viper.OnConfigChange(func(in fsnotify.Event) {
		viper.Unmarshal(&applicationOptions)
	})
	
	viper.ReadInConfig()
	viper.Unmarshal(&applicationOptions)
}

func GetOptions() ApplicationOptions {
	return applicationOptions
}
